{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","_useState","useState","_useState2","Object","slicedToArray","text","setText","_useState3","_useState4","imageUrl","setImageUrl","generateQrCode","useRef","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","response","wrap","_context","prev","next","Qrcode","toDataURL","sent","t0","console","log","stop","apply","this","arguments","react_default","createElement","className","type","class","placeholder","onChange","e","target","value","id","data-toggle","onClick","href","download","src","alt","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App","document","getElementById"],"mappings":"mRAuFeA,MAjFf,WAAe,IAAAC,EAEQC,mBAAS,IAFjBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAENK,EAFMH,EAAA,GAEDI,EAFCJ,EAAA,GAAAK,EAGiBN,mBAAS,IAH1BO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAGNE,EAHMD,EAAA,GAGGE,EAHHF,EAAA,GAMPG,GADQC,iBAAO,MACD,eAAAC,EAAAV,OAAAW,EAAA,EAAAX,CAAAY,EAAAC,EAAAC,KAAG,SAAAC,IAAA,IAAAC,EAAA,OAAAJ,EAAAC,EAAAI,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAECC,IAAOC,UAAUpB,GAFlB,OAEhBc,EAFgBE,EAAAK,KAGzBhB,EAAYS,GAHaE,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAM,GAAAN,EAAA,SAKvBO,QAAQC,IAARR,EAAAM,IALuB,yBAAAN,EAAAS,SAAAZ,EAAA,iBAAH,yBAAAL,EAAAkB,MAAAC,KAAAC,YAAA,IAepB,OACEC,EAAAlB,EAAAmB,cAAA,OAAKC,UAAU,OAChBF,EAAAlB,EAAAmB,cAAA,OAAKC,UAAU,aAChBF,EAAAlB,EAAAmB,cAAA,MAAIC,UAAU,WAAd,oBAEAF,EAAAlB,EAAAmB,cAAA,MAAIC,UAAU,OACfF,EAAAlB,EAAAmB,cAAA,OAAKC,UAAU,oBACbF,EAAAlB,EAAAmB,cAAA,OAAKC,UAAU,OAIlBF,EAAAlB,EAAAmB,cAAA,OAAKC,UAAU,OACbF,EAAAlB,EAAAmB,cAAA,iCACED,EAAAlB,EAAAmB,cAAA,SACCE,KAAK,OACJC,MAAM,eACLC,YAAY,sBACXC,SAAU,SAACC,GACnBnC,EAAQmC,EAAEC,OAAOC,UAObT,EAAAlB,EAAAmB,cAAA,OAAKC,UAAU,mBACdQ,GAAG,MACFC,cAAY,UACXC,QAAS,kBAAMnC,MAEpBuB,EAAAlB,EAAAmB,cAAA,SAAOC,UAAU,4BAAjB,oBAGAF,EAAAlB,EAAAmB,cAAA,WACCD,EAAAlB,EAAAmB,cAAA,WACC1B,EAECyB,EAAAlB,EAAAmB,cAAA,KAAIY,KAAMtC,EAAUuC,UAAQ,GAC3Bd,EAAAlB,EAAAmB,cAAA,OAAKc,IAAKxC,EAAUyC,IAAI,SAGtB,aCxDOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAb,EAAA,GAAAc,KAAAD,EAAAE,KAAA,UAAqBD,KAAK,SAAA1C,GAAiD,IAA9C4C,EAA8C5C,EAA9C4C,OAAQC,EAAsC7C,EAAtC6C,OAAQC,EAA8B9C,EAA9B8C,OAAQC,EAAsB/C,EAAtB+C,OAAQC,EAAchD,EAAdgD,QAC3DJ,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAQT,MCDdU,IAASC,OACP7B,EAAAlB,EAAAmB,cAACD,EAAAlB,EAAMgD,WAAP,KACE9B,EAAAlB,EAAAmB,cAAC8B,EAAD,OAEFC,SAASC,eAAe,SAM1BhB","file":"static/js/main.74417b54.chunk.js","sourcesContent":["import React, { useRef, useState } from 'react'\nimport './App.css';\nimport Qrcode from 'qrcode';\n\n\n\nfunction App() {\n  \n  const [text,setText]=useState('');\n  const [imageUrl,setImageUrl]= useState('');\n  \n  const qrRef = useRef(null);\n  const generateQrCode = async() =>{\ntry {\n   const response = await Qrcode.toDataURL(text);\nsetImageUrl(response)\n} catch (error) {\n  console.log(error)\n}\n  }\n\n\nconst onScanFile =()=>{\n  qrRef.current.openImageDialog();\n}\n\n  \n  return (\n    <div className=\"App\">\n   <div className=\"jumbotron\">\n  <h1 className=\"display\">Generate Qr code</h1>\n  \n  <hr className=\"my\" />\n <div className='container-fluid '>\n   <div className='row'>\n\n\n\n<div className='col'>\n  <label >Generate Qr code</label>\n    <input\n     type=\"text\"\n      class=\"form-control\" \n       placeholder=\"Enter the text here\"\n        onChange={(e)=>{\nsetText(e.target.value)\n    }\n    }\n    >\n    </input>\n\n\n    <div className=\"btn-group-toggle\"\n     id='btn'\n      data-toggle=\"buttons\"\n       onClick={() => generateQrCode()}\n       >\n  <label className=\"btn btn-secondary active\">\n     Generate Qr Code\n  </label>\n  <hr />\n   <div>\n  { imageUrl ?\n   (\n     < a href={imageUrl} download>\n      <img src={imageUrl} alt=\"img\" />\n      </a>\n      )\n      : null\n    }\n    </div>\n \n</div>\n</div>\n\n\n\n\n\n   </div>\n </div>\n</div>\n    </div>\n  );\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}